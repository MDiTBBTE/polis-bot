/*

  /update_user_balance ${user_id} ${amount}                 - –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å–∫–∏
  /send_police_to_user ${user_id} ${car_id} ${policy_id}    - –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ–ª–∏—Å–∞ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –±–∞–∑–µ

  Every day at 8 am we run checkAndUpdateExpiredPolicies()  - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ–± –∏—Å—Ç–∏—á–µ–Ω–∏–µ –ø–æ–ª–∏—Å–∞/–∞–ø–¥–µ–π—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª–∏—Å–∞
*/

require("dotenv").config();
const { Telegraf } = require("telegraf");
const { MongoClient, ObjectId, GridFSBucket } = require("mongodb");
const { Readable } = require('stream');
const cron = require('node-cron');
const path = require('path');
const fs = require('fs');

const TOKEN = process.env.TOKEN;
const url = process.env.MONGODB_URL;
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID;

const bot = new Telegraf(TOKEN);
const client = new MongoClient(url);

const priceList = [
  { duration: "1 –º–µ—Å—è—Ü", cost: 140, callback_data: "buy_policy_1_month" },
  { duration: "3 –º–µ—Å—è—Ü–∞", cost: 390, callback_data: "buy_policy_3_months" },
];

let canAnswer = false;

client
  .connect()
  .then(() => {
    console.log("Connected to MongoDB");

    const db = client.db("car_insurance");
    const usersCollection = db.collection("users");
    const carsCollection = db.collection("cars");
    const policiesCollection = db.collection("policies");
    const bucket = new GridFSBucket(client.db('car_insurance'));

    const userStates = new Map();

    function formatDate(date) {
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, "0");
      const day = String(date.getDate()).padStart(2, "0");
      return `${day}.${month}.${year}`;
    }

    function getStartDate() {
      return new Date();
    }

    function getExpirationDate(startDate, monthsDuration) {
      const expirationDate = new Date(startDate);
      expirationDate.setMonth(expirationDate.getMonth() + monthsDuration);
      return expirationDate;
    }

    async function myGarage(ctx) {
      userStates.delete(ctx.from.id);
      const userId = ctx.from.id;
      const user = await usersCollection.findOne({ id: userId });

      if (user) {
        ctx.reply(
          `–ú–æ–π –≥–∞—Ä–∞–∂ üöò \n–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.username}\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.id}\n–ë–∞–ª–∞–Ω—Å: ${user.balance} PLN`,
          {
            reply_markup: {
              inline_keyboard: [
                [{ text: "–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data: "add_car" }],
                [{ text: "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data: "add_balance" }],
              ],
            },
          }
        );

        const cars = await carsCollection.find({ user_id: userId }).toArray();
        cars.forEach((car) => {
          ctx.reply(`üöô ${car.car_info}`, {
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: "A–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª–∏—Å—ã",
                    callback_data: `view_policies_${car._id}`,
                  },
                ],
                [
                  {
                    text: "–ê—Ä—Ö–∏–≤ –ø–æ–ª–∏—Å–æ–≤",
                    callback_data: `archived_policies_${car._id}`,
                  },
                ],
                [
                  {
                    text: "–£–¥–∞–ª–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å",
                    callback_data: `delete_car_${car._id}`,
                  },
                ],
              ],
            },
          });
        });
      } else {
        await usersCollection.insertOne({
          id: userId,
          username: ctx.from.username,
          balance: 0,
        });
        ctx.reply("–í–∞—à –≥–∞—Ä–∞–∂ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", {
          reply_markup: {
            inline_keyboard: [
              [{ text: "–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data: "add_car" }],
            ],
          },
        });
      }
      canAnswer = true;
    }

    function addBalance(ctx) {
      userStates.delete(ctx.from.id);
      ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", {
        reply_markup: {
          inline_keyboard: [
            [{ text: "Blik –Ω–∞ –Ω–æ–º–µ—Ä üì±", callback_data: "blik_phone" }],
            [
              {
                text: "–ë—ã—Å—Ç—Ä—ã–π –±–∞–Ω–∫–æ–≤–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ üè¶",
                callback_data: "bank_iban",
              },
            ],
          ],
        },
      });
    }

    async function createPolis(ctx) {
      userStates.delete(ctx.from.id);
      const userId = ctx.from.id;
      const cars = await carsCollection.find({ user_id: userId }).toArray();

      if (cars.length === 0) {
        ctx.reply("–í–∞—à –≥–∞—Ä–∞–∂ –ø—É—Å—Ç. –î–æ–±–∞–≤—å—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", {
          reply_markup: {
            inline_keyboard: [
              [{ text: "–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å", callback_data: "add_car" }],
            ],
          },
        });
      } else {
        const buttons = cars.map((car) => [
          {
            text: `–í—ã–±—Ä–∞—Ç—å: ${car.car_info}`,
            callback_data: `select_car_${car._id}`,
          },
        ]);
        ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –¥–ª—è –ø–æ–ª–∏—Å–∞:", {
          reply_markup: {
            inline_keyboard: buttons,
          },
        });
      }
      canAnswer = true;
    }

    function support(ctx) {
      userStates.delete(ctx.from.id);
      ctx.reply("–ù–∞–ø–∏—à–∏—Ç–µ –≤ –Ω–∞—à—É —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ @vlcontact");
      canAnswer = true;
    }

    function aboutUs(ctx) {
      userStates.delete(ctx.from.id);
      ctx.reply(
        `–ú—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —É–¥–æ–±–Ω—ã–µ –∏ –≥–∏–±–∫–∏–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. –ù–∞—à–∞ —Ü–µ–ª—å - —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è –±—ã—Å—Ç—Ä—ã–º –∏ –ø—Ä–æ—Å—Ç—ã–º, —á—Ç–æ–±—ã –≤—ã –º–æ–≥–ª–∏ –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Ö–ª–æ–ø–æ—Ç –∑–∞—â–∏—Ç–∏—Ç—å —Å–µ–±—è –∏ —Å–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –Ω–∞ –Ω—É–∂–Ω—ã–π –≤–∞–º —Å—Ä–æ–∫. –ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:

        - –ì–∏–±–∫–∏–µ —Å—Ä–æ–∫–∏: –≤—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è –æ—Ç 1 –¥–æ 3 –º–µ—Å—è—Ü–µ–≤.
        - –ë—ã—Å—Ç—Ä–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ: –ø–æ–ª—É—á–∏—Ç–µ –ø–æ–ª–∏—Å –≤ –Ω–µ—Å–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ —á–µ—Ä–µ–∑ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞.
        - –ü—Ä–æ–∑—Ä–∞—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: –Ω–∏–∫–∞–∫–∏—Ö —Å–∫—Ä—ã—Ç—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ—Å—Ç–µ–π.
        - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 24/7: –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –ø–æ–º–æ—á—å –≤–∞–º.

        –û—Ñ–æ—Ä–º–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–µ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å –∏ –±—É–¥—å—Ç–µ —É–≤–µ—Ä–µ–Ω—ã –≤ —Å–≤–æ–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –Ω–∞ –¥–æ—Ä–æ–≥–µ!`,
        {
          reply_markup: {
            inline_keyboard: [
              [{ text: "–°–¥–µ–ª–∞—Ç—å –ø–æ–ª–∏—Å üìÉ", callback_data: "create_polis" }],
              [{ text: "–î–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ–º–æ–±–∏–ª—å üöô", callback_data: "add_car" }],
            ],
          },
        }
      );
      canAnswer = true;
    }

    function start(ctx) {
      userStates.delete(ctx.from.id);
      ctx.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –±–æ—Ç –ø–æ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—é –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–ª–∏—Å –∑–∞ —Å—á–∏—Ç–∞–Ω–Ω—ã–µ –º–∏–Ω—É—Ç—ã. \n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        {
          reply_markup: {
            keyboard: [
              [{ text: "–ú–æ–π –≥–∞—Ä–∞–∂ üöò" }],
              [{ text: "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ üí∏" }, { text: "–°–¥–µ–ª–∞—Ç—å –ø–æ–ª–∏—Å üìÉ" }],
              [{ text: "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç üßë‚Äçüíº" }, { text: "–û –Ω–∞—Å ‚ÑπÔ∏è" }],
            ],
            resize_keyboard: true,
          },
        }
      );
      canAnswer = true;
    }

    async function sendPolicyToUser(ctx, userId, carId, policyID, caption) {
      try {
          const policyIDToString = policyID.toString();
          const policy = await policiesCollection.findOne({
              user_id: userId,
              car_id: carId,
              policy_id: policyIDToString,
          });
  
          if (!policy) {
              return ctx.reply("–§–∞–π–ª –ø–æ–ª–∏—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n" + caption);
          }
  
          const fileId = policy.file_id;
          const fileObjectId = new ObjectId(fileId);
          const downloadStream = bucket.openDownloadStream(fileObjectId);
          const filePath = path.join('/tmp', `policy_${userId}_${carId}_${policyIDToString}.pdf`);
          const writableStream = fs.createWriteStream(filePath);
          downloadStream.pipe(writableStream);
  
          writableStream.on('finish', async () => {
              try {
                  await bot.telegram.sendDocument(userId, { source: filePath }, {caption});
                  // Delete the temporary file after sending
                  fs.unlink(filePath, (err) => {
                      if (err) {
                          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞:', err.message);
                      }
                  });
  
              } catch (sendError) {
                  console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞:', sendError.message);
                  ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.');
              }
          });
  
          writableStream.on('error', (writeError) => {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞:', writeError.message);
              ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.');
          });
  
          downloadStream.on('error', (downloadError) => {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –∏–∑ GridFS:', downloadError.message);
              ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞.');
          });
      } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª–∏—Å–∞:", error.message);
          ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª–∏—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.");
      }
  }

    // ----- BOT

    bot.start((ctx) => {
      start(ctx);
      console.log(`start: ${ctx.message.text}`);
    });

    bot.hears("–ú–æ–π –≥–∞—Ä–∞–∂ üöò", (ctx) => {
      canAnswer = false;
      myGarage(ctx);
      console.log(`My garage: ${ctx.message.text}`);
    });

    bot.hears("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ üí∏", (ctx) => {
      canAnswer = false;
      addBalance(ctx);
      console.log(`–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: ${ctx.message.text}`);
    });

    bot.hears("–°–¥–µ–ª–∞—Ç—å –ø–æ–ª–∏—Å üìÉ", async (ctx) => {
      createPolis(ctx);
      console.log(`–°–¥–µ–ª–∞—Ç—å –ø–æ–ª–∏—Å: ${ctx.message.text}`);
    });

    bot.hears("–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç üßë‚Äçüíº", async (ctx) => {
      support(ctx);
      console.log(`–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç: ${ctx.message.text}`);
    });

    bot.hears("–û –Ω–∞—Å ‚ÑπÔ∏è", async (ctx) => {
      aboutUs(ctx);
      console.log(`About us: ${ctx.message.text}`);
    });

    bot.command('update_user_balance', async (ctx) => {
      if (ctx.chat.id === Number(ADMIN_CHAT_ID)) {
        const text = ctx.message.text.trim();
        const [command, userId, amount] = text.split(' ');

        if (!userId || !amount) {
          return ctx.reply('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /update_user_balance id —Å—É–º–º–∞');
        }

        const userIdNum = parseInt(userId);
        const amountNum = parseFloat(amount);

        if (isNaN(userIdNum) || isNaN(amountNum) || amountNum <= 0) {
          return ctx.reply('ID –∏ —Å—É–º–º–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º–∏ —á–∏—Å–ª–∞–º–∏.');
        }

        try {
          const user = await usersCollection.findOne({ id: userIdNum });

          if (user) {
            await usersCollection.updateOne(
              { id: userIdNum },
              { $inc: { balance: amountNum } }
            );

            ctx.reply(`–ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userIdNum} —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${amountNum} PLN.`);

            await bot.telegram.sendMessage(userIdNum, `–í–∞—à –±–∞–ª–∞–Ω—Å –±—ã–ª –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${amountNum} PLN.`);
          } else {
            ctx.reply(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å c ID ${userIdNum} –Ω–µ –Ω–∞–π–¥–µ–Ω.`);
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
          ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.');
        }
      } else {
        ctx.reply('–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–µ.');
      }
    });

    bot.on("callback_query", async (ctx) => {
      const data = ctx.callbackQuery.data;
      const userId = ctx.from.id;

      if (data === "add_car") {
        ctx.reply(
          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É, –º–æ–¥–µ–ª—å –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∞–≤—Ç–æ–º–æ–±–∏–ª—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: \nBMW 318i ABC12345"
        );
        userStates.set(userId, "waiting_for_car_info");
      } else if (data === "add_balance") {
        ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", {
          reply_markup: {
            inline_keyboard: [
              [{ text: "Blik –Ω–∞ –Ω–æ–º–µ—Ä üì±", callback_data: "blik_phone" }],
              [
                {
                  text: "–ë—ã—Å—Ç—Ä—ã–π –±–∞–Ω–∫–æ–≤–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥ üè¶",
                  callback_data: "bank_iban",
                },
              ],
            ],
          },
        });
      } else if (data === "blik_phone") {
        ctx.reply(
          `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –Ω–æ–º–µ—Ä +48777777777 –≤ —Ç–∏—Ç—É–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π üÜî: ${ctx.chat.id} \n\n–ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª –∏–ª–∏ —Å–∫—Ä–∏–Ω —à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞. `
        );
      } else if (data === "bank_iban") {
        ctx.reply(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–¥–µ–ª–∞–π—Ç–µ –±—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –¥–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞ PLiban.
–í —Ç–∏—Ç—É–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π üÜî: ${ctx.chat.id} \n\n–í–∞–∂–Ω–æ  üö® –≤–æ –∏–∑–±–µ–∂–∞–Ω–∏—è –¥–æ–ª–≥–æ–≥–æ –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞ —Å—á–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –¥–µ–ª–∞–µ—Ç–µ –±—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ–≤–æ–¥ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª –∏–ª–∏ —Å–∫—Ä–∏–Ω —à–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞.`);
      } else if (data.startsWith("select_car_")) {
        const carId = data.split("_")[2];
        userStates.set(userId, `waiting_for_policy_duration_${carId}`);

        const buttons = priceList.map((price) => [
          {
            text: `${price.duration} - ${price.cost} PLN`,
            callback_data: `${price.callback_data}_${carId}`,
          },
        ]);

        ctx.reply("–ù–∞ –∫–∞–∫–æ–π —Å—Ä–æ–∫ —Å–¥–µ–ª–∞—Ç—å –ø–æ–ª–∏—Å?", {
          reply_markup: {
            inline_keyboard: buttons,
          },
        });
      } else if (data.startsWith("buy_policy_")) {
        const parts = data.split("_");
        const duration = `${parts[2]}_${parts[3]}`;
        const carId = parts[4];
        const selectedPrice = priceList.find(
          (price) => price.callback_data === `buy_policy_${duration}`
        );
        const cost = selectedPrice ? selectedPrice.cost : null;

        if (cost === null) {
          ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
          return;
        }

        // Fetch the updated user data
        const user = await usersCollection.findOne({ id: userId });

        if (user.balance >= cost) {
          await usersCollection.updateOne(
            { id: userId },
            { $inc: { balance: -cost } }
          );

          const policyID = new ObjectId();
          const car = await carsCollection.findOne({_id: ObjectId.createFromHexString(carId)});

          let startDate = getStartDate();
          let expirationDate = getExpirationDate(startDate, parseInt(duration.split(" ")[0]));
          let policyStatus = 'active'; 

          if (car && car.policies && car.policies.length > 0) {
              const activePolicyExists = car.policies.find(policy => 
                  policy.status === 'active' && new Date(policy.date_of_expiration) > new Date()
              );

              if (activePolicyExists) {
                policyStatus = 'pending';
                startDate = activePolicyExists.date_of_expiration;
                expirationDate = getExpirationDate(activePolicyExists.date_of_expiration, parseInt(duration.split(" ")[0]));
              }
          }

          await carsCollection.updateOne(
            { _id: ObjectId.createFromHexString(carId) },
            {
              $push: {
                policies: {
                  id: policyID,
                  status: policyStatus,
                  date_of_start: startDate,
                  date_of_expiration: expirationDate,
                },
              },
            }
          );

          ctx.reply("–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ–ª–∏—Å –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤.");
          bot.telegram.sendMessage(
            ADMIN_CHAT_ID,
            `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${user.username} –∑–∞–∫–∞–∑–∞–ª –ø–æ–ª–∏—Å. \n\n–ê–≤—Ç–æ–º–æ–±–∏–ª—å: ${car.car_info} \n–°—Ä–æ–∫ –ø–æ–ª–∏—Å–∞ –≤ –º–µ—Å—è—Ü–∞—Ö: ${duration} \n–î–∞–Ω–Ω—ã–µ —Å –±–∞–∑—ã: \nuser_id: ${user.id} \ncar_id: ${carId} \npolicy_id: ${policyID}`
          );
        } else {
          ctx.reply(
            `–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ. –í–∞—à –±–∞–ª–∞–Ω—Å ${user.balance}`,
            {
              reply_markup: {
                inline_keyboard: [
                  [{ text: "–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data: "add_balance" }],
                ],
              },
            }
          );
        }
      } else if (data.startsWith("delete_car_")) {
        const carId = data.split("_")[2];
        const car = await carsCollection.findOne({
          _id: ObjectId.createFromHexString(carId),
        });
        await carsCollection.deleteOne({
          _id: ObjectId.createFromHexString(carId),
        });
        ctx.reply(`–ê–≤—Ç–æ–º–æ–±–∏–ª—å ${car.car_info} —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ –≥–∞—Ä–∞–∂–∞.`);
      } else if (data === "my_garage") {
        myGarage(ctx);
      } else if (data === "create_polis") {
        createPolis(ctx);
      } else if (data === "support") {
        support(ctx);
      } else if (data === "about_us") {
        aboutUs(ctx);
      } else if (data.startsWith("view_policies_")) {
        const carId = data.split("_")[2];
        const car = await carsCollection.findOne({_id: ObjectId.createFromHexString(carId)});

        if (car && car.policies && car.policies.length > 0) {
          const activePolicies = car.policies.filter(p => p.status === 'active' || p.status === 'pending');

          await ctx.reply(`üöô –í—Å–µ –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ/–≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –ø–æ–ª–∏—Å—ã –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å.`);

          const messagePromises = activePolicies.map(async (policy) => {
              const policyID = policy?.id || null;
              const status = policy.status === 'active' ? "–ê–∫—Ç–∏–≤–Ω—ã–π" : policy.status === 'pending' ? '–í –æ–∂–∏–¥–∞–Ω–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è' : "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π";
              const startDate = formatDate(new Date(policy.date_of_start));
              const expirationDate = formatDate(new Date(policy.date_of_expiration));

              // Send policy PDF document
              if (policyID) {
                await sendPolicyToUser(
                  ctx,
                  car.user_id,
                  carId, 
                  policyID,
                  `üöô ${car.car_info} \n–°—Ç–∞—Ç—É—Å: ${status}\n–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏—è: ${startDate}\n–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: ${expirationDate}`
                );
              } else {
                // Send policy information
                await ctx.reply(
                  `üöô –§–∞–π–ª –ø–æ–ª—é—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n ${car.car_info} \n–°—Ç–∞—Ç—É—Å: ${status}\n–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏—è: ${startDate}\n–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: ${expirationDate}`
                );
              }
          });
          
          await Promise.all(messagePromises);

        } else {
          ctx.reply(`–ü–æ–ª–∏—Å—ã –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è ${car.car_info} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.`);
        }
      } else if (data.startsWith("archived_policies_")) {
        const carId = data.split("_")[2];
        const car = await carsCollection.findOne({
          _id: ObjectId.createFromHexString(carId),
        });

        if (car && car.policies && car.policies.length > 0) {
          const archivedPolicies = car.policies.filter(p => p.status === 'archived');

          await ctx.reply(`üöô –í—Å–µ –≤–∞—à–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª–∏—Å—ã –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å.`);

          const messagePromises = archivedPolicies.map(async (policy) => {
              const status = "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π";
              const startDate = formatDate(new Date(policy.date_of_start));
              const expirationDate = formatDate(new Date(policy.date_of_expiration));

              await ctx.reply(
                  `üöô ${car.car_info} \n–°—Ç–∞—Ç—É—Å: ${status}\n–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –¥–µ–π—Å—Ç–≤–∏—è: ${startDate}\n–î–∞—Ç–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è: ${expirationDate}`
              );
          });

          await Promise.all(messagePromises);

        } else {
          ctx.reply(`–ü–æ–ª–∏—Å—ã –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è ${car.car_info} –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.`);
        }
      }

      canAnswer = true;
    });

    bot.on("text", async (ctx) => {
      console.log('text', JSON.stringify(ctx));
      const userId = ctx.from.id;
      const state = userStates.get(userId);

      if (state === "waiting_for_car_info") {
        const carInfo = ctx.message.text;
        await carsCollection.insertOne({
          user_id: userId,
          car_info: carInfo,
          policies: [],
        });
        ctx.reply(`–ê–≤—Ç–æ–º–æ–±–∏–ª—å ${carInfo} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à –≥–∞—Ä–∞–∂.`, {
          reply_markup: {
            inline_keyboard: [
              [{ text: "–°–¥–µ–ª–∞—Ç—å –ø–æ–ª–∏—Å üìÉ", callback_data: "create_polis" }],
              [{ text: "–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–∏–Ω üöô", callback_data: "add_car" }],
            ],
          },
        });
        userStates.delete(userId);
      } else if (ctx.text.trim() && canAnswer) {
        ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞:", {
          reply_markup: {
            inline_keyboard: [
              [{ text: "–ú–æ–π –≥–∞—Ä–∞–∂ üöò", callback_data: "my_garage" }],
              [{ text: "–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ üí∏", callback_data: "add_balance" }],
              [{ text: "–°–¥–µ–ª–∞—Ç—å –ø–æ–ª–∏—Å üìÉ", callback_data: "create_polis" }],
              [{ text: "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç üßë‚Äçüíº", callback_data: "support" }],
              [{ text: "–û –Ω–∞—Å ‚ÑπÔ∏è", callback_data: "about_us" }],
            ],
          },
        });
      } else if (!canAnswer && ctx.message != "/start") {
        start(ctx);
      }
    });

    const userPhotoMap = new Map(); // –ö–∞—Ä—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π fileId –∏ userId

    bot.on("photo", async (ctx) => {
      const userId = ctx.from.id;
      const photo = ctx.message.photo.pop(); // –ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é (–æ–±—ã—á–Ω–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è) —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
      const fileId = photo.file_id;

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ fileId –∏ userId
      userPhotoMap.set(fileId, userId);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –∫–∞–Ω–∞–ª
      await ctx.telegram.sendPhoto(ADMIN_CHAT_ID, fileId, {
        caption: `–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${ctx.from.username} üÜî: ${userId}`,
      });
      ctx.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é!");
    });

    bot.on('document', async (ctx) => {
      console.log('Received document:', ctx);
    
      const document = ctx.message.document;
      const text = ctx.message.caption || '';
    
      if (text.startsWith('/send_police_to_user')) {
        const args = text.split(' ');
    
        if (args.length < 4) {
          return ctx.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /send_police_to_user <user_id> <car_id> <policy_id>");
        }

        const userId = parseInt(args[1], 10);
        const carId = args[2];
        const policyID = args[3];
    
        if (isNaN(userId)) {
          return ctx.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç user_id.");
        }

        if (!carId) {
          return ctx.reply("–ù–µ —É–∫–∞–∑–∞–Ω car_id.");
        }

        if (!policyID) {
          return ctx.reply("–ù–µ —É–∫–∞–∑–∞–Ω policy_id.");
        }
    
        const fileId = document.file_id;
        if (!fileId) {
          return ctx.reply("–ù–µ —É–∫–∞–∑–∞–Ω file_id.");
        }
    
        try {
          const fileLink = await bot.telegram.getFileLink(fileId);
          const fileStream = await fetch(fileLink).then(res => res.body); // Use fetch to get the file stream
          const readableStream = Readable.from(fileStream);
    
          const uploadStream = bucket.openUploadStream(`policy_${userId}_${carId}_${policyID}.pdf`);
          readableStream.pipe(uploadStream);
    
          uploadStream.on('finish', async () => {
            const car = await carsCollection.findOne({
              _id: ObjectId.createFromHexString(carId),
            });
            await client.db("car_insurance").collection("policies").insertOne({
              user_id: userId,
              car_id: carId,
              policy_id: policyID,
              file_id: uploadStream.id.toString(),
              filename: `policy_${userId}_${carId}_${policyID}.pdf`,
              uploadDate: new Date(),
            });
    
            await bot.telegram.sendDocument(userId, document.file_id, {
              caption: `–í–∞—à –ø–æ–ª–∏—Å —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å ${car.car_info}.`,
            });
            ctx.reply(`–ü–æ–ª–∏—Å (policy_id: ${policyID}) –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${ctx.message.from.username} (user_id: ${userId}) –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å ${car.car_info} (car_id: ${carId}) —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –±–∞–∑–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.`);
          });
    
          uploadStream.on('error', (error) => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤ GridFS:', error.message);
            ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.');
          });
    
        } catch (error) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª–∏—Å–∞:", error.message);
          ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª–∏—Å–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.");
        }
    
        return;
      }
    
      // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
      await ctx.telegram.sendDocument(ADMIN_CHAT_ID, document.file_id, {
        caption: `–î–æ–∫—É–º–µ–Ω—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @${ctx.from.username} üÜî: ${ctx.from.id}`,
      });
      ctx.reply("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –¥–æ–∫—É–º–µ–Ω—Ç!");
    });

    // Send messages to users
    bot.on("channel_post", async (ctx) => {
      const post = ctx.channelPost;
      const postText = post.text.trim();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
      if (!postText) {
        console.log("–°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª–µ –ø—É—Å—Ç–æ–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.");
        return;
      }

      // –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID —á–∞—Ç–∞ –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
      const regex = /^(\d+)\s+(.+)$/;
      const match = postText.match(regex);

      // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —à–∞–±–ª–æ–Ω—É, –ª–æ–≥–∏—Ä—É–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º
      if (!match) {
        ctx.reply("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID —á–∞—Ç–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç.");
        return;
      }

      // –ò–∑–≤–ª–µ–∫–∞–µ–º ID —á–∞—Ç–∞ –∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
      const chatId = match[1];
      const message = match[2];

      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç
        await ctx.telegram.sendMessage(chatId, message);
        console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç —Å ID: ${chatId}`);
      } catch (error) {
        console.error(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç —Å ID: ${chatId}`,
          error
        );
      }
    });


    const checkAndUpdateExpiredPolicies = async () => {
      try {
          const allCars = await carsCollection.find({}).toArray();
  
          for (const car of allCars) {
              for (const p of car.policies) {
                  const currentDate = new Date();
                  const expirationDate = new Date(p.date_of_expiration);
                  const isReminderDate = new Date(expirationDate);
                  isReminderDate.setDate(expirationDate.getDate() - 2);
  
                  // Send reminder message for expiring policies
                  if (p.status === 'active' && currentDate.toDateString() === isReminderDate.toDateString()) {
                      await bot.telegram.sendMessage(car.user_id, `–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –í–∞—à –ø–æ–ª–∏—Å —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ ${car.car_info} –∏—Å—Ç–µ—á–µ—Ç —á–µ—Ä–µ–∑ 2 –¥–Ω—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω.`);
                  }
  
                  // Archive expired policies
                  if (p.status === 'active' && expirationDate < currentDate) {
                      await carsCollection.updateOne(
                          { _id: car._id, 'policies.id': p.id },
                          { $set: { 'policies.$.status': 'archived' } }
                      );
  
                      await bot.telegram.sendMessage(car.user_id, `–í–∞—à –ø–æ–ª–∏—Å —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞—Ä–µ–ª –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ ${car.car_info}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ –µ–≥–æ.`);

                      // Activate any pending policies if there are no active policies
                      const hasPendingPolicy = car.policies.some(p => p.status === 'pending');
                      if (hasPendingPolicy) {
                          await carsCollection.updateOne(
                              { _id: car._id, 'policies.status': 'pending' },
                              { $set: { 'policies.$.status': 'active' } }
                          );
          
                          await bot.telegram.sendMessage(car.user_id, `–í–∞—à –ø–æ–ª–∏—Å —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è –Ω–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ ${car.car_info} –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.`);
                      }
                  }
              }
          }
      } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª–∏—Å–æ–≤:', error.message);
      }
    };

    cron.schedule('00 8 * * *', () => {
      console.log('Checking and updating expired policies...');
      checkAndUpdateExpiredPolicies();
    });

    bot.launch();
  })
  .catch((err) => {
    console.error("Failed to connect to MongoDB", err);
  });